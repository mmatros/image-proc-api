// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: api/image-proc-api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImageProcApiClient is the client API for ImageProcApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageProcApiClient interface {
	ConvertImage(ctx context.Context, in *ConvertRequest, opts ...grpc.CallOption) (*ConvertResponse, error)
}

type imageProcApiClient struct {
	cc grpc.ClientConnInterface
}

func NewImageProcApiClient(cc grpc.ClientConnInterface) ImageProcApiClient {
	return &imageProcApiClient{cc}
}

func (c *imageProcApiClient) ConvertImage(ctx context.Context, in *ConvertRequest, opts ...grpc.CallOption) (*ConvertResponse, error) {
	out := new(ConvertResponse)
	err := c.cc.Invoke(ctx, "/imageproc.ImageProcApi/ConvertImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageProcApiServer is the server API for ImageProcApi service.
// All implementations must embed UnimplementedImageProcApiServer
// for forward compatibility
type ImageProcApiServer interface {
	ConvertImage(context.Context, *ConvertRequest) (*ConvertResponse, error)
	mustEmbedUnimplementedImageProcApiServer()
}

// UnimplementedImageProcApiServer must be embedded to have forward compatible implementations.
type UnimplementedImageProcApiServer struct {
}

func (UnimplementedImageProcApiServer) ConvertImage(context.Context, *ConvertRequest) (*ConvertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertImage not implemented")
}
func (UnimplementedImageProcApiServer) mustEmbedUnimplementedImageProcApiServer() {}

// UnsafeImageProcApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageProcApiServer will
// result in compilation errors.
type UnsafeImageProcApiServer interface {
	mustEmbedUnimplementedImageProcApiServer()
}

func RegisterImageProcApiServer(s grpc.ServiceRegistrar, srv ImageProcApiServer) {
	s.RegisterService(&ImageProcApi_ServiceDesc, srv)
}

func _ImageProcApi_ConvertImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageProcApiServer).ConvertImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imageproc.ImageProcApi/ConvertImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageProcApiServer).ConvertImage(ctx, req.(*ConvertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImageProcApi_ServiceDesc is the grpc.ServiceDesc for ImageProcApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageProcApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imageproc.ImageProcApi",
	HandlerType: (*ImageProcApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConvertImage",
			Handler:    _ImageProcApi_ConvertImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/image-proc-api.proto",
}
