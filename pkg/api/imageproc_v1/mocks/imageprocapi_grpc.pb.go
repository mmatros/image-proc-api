// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/api/imageproc_v1/imageprocapi_grpc.pb.go

// Package imageprocapi_v1 is a generated GoMock package.
package imageprocapi_v1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	imageproc_v1 "github.com/mmatros/image-proc-api/pkg/api/imageproc_v1"
	grpc "google.golang.org/grpc"
)

// MockImageProcApiClient is a mock of ImageProcApiClient interface.
type MockImageProcApiClient struct {
	ctrl     *gomock.Controller
	recorder *MockImageProcApiClientMockRecorder
}

// MockImageProcApiClientMockRecorder is the mock recorder for MockImageProcApiClient.
type MockImageProcApiClientMockRecorder struct {
	mock *MockImageProcApiClient
}

// NewMockImageProcApiClient creates a new mock instance.
func NewMockImageProcApiClient(ctrl *gomock.Controller) *MockImageProcApiClient {
	mock := &MockImageProcApiClient{ctrl: ctrl}
	mock.recorder = &MockImageProcApiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageProcApiClient) EXPECT() *MockImageProcApiClientMockRecorder {
	return m.recorder
}

// ConvertImage mocks base method.
func (m *MockImageProcApiClient) ConvertImage(ctx context.Context, in *imageproc_v1.ConvertRequest, opts ...grpc.CallOption) (*imageproc_v1.ConvertResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConvertImage", varargs...)
	ret0, _ := ret[0].(*imageproc_v1.ConvertResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertImage indicates an expected call of ConvertImage.
func (mr *MockImageProcApiClientMockRecorder) ConvertImage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertImage", reflect.TypeOf((*MockImageProcApiClient)(nil).ConvertImage), varargs...)
}

// MockImageProcApiServer is a mock of ImageProcApiServer interface.
type MockImageProcApiServer struct {
	ctrl     *gomock.Controller
	recorder *MockImageProcApiServerMockRecorder
}

// MockImageProcApiServerMockRecorder is the mock recorder for MockImageProcApiServer.
type MockImageProcApiServerMockRecorder struct {
	mock *MockImageProcApiServer
}

// NewMockImageProcApiServer creates a new mock instance.
func NewMockImageProcApiServer(ctrl *gomock.Controller) *MockImageProcApiServer {
	mock := &MockImageProcApiServer{ctrl: ctrl}
	mock.recorder = &MockImageProcApiServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageProcApiServer) EXPECT() *MockImageProcApiServerMockRecorder {
	return m.recorder
}

// ConvertImage mocks base method.
func (m *MockImageProcApiServer) ConvertImage(arg0 context.Context, arg1 *imageproc_v1.ConvertRequest) (*imageproc_v1.ConvertResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertImage", arg0, arg1)
	ret0, _ := ret[0].(*imageproc_v1.ConvertResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertImage indicates an expected call of ConvertImage.
func (mr *MockImageProcApiServerMockRecorder) ConvertImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertImage", reflect.TypeOf((*MockImageProcApiServer)(nil).ConvertImage), arg0, arg1)
}

// mustEmbedUnimplementedImageProcApiServer mocks base method.
func (m *MockImageProcApiServer) mustEmbedUnimplementedImageProcApiServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedImageProcApiServer")
}

// mustEmbedUnimplementedImageProcApiServer indicates an expected call of mustEmbedUnimplementedImageProcApiServer.
func (mr *MockImageProcApiServerMockRecorder) mustEmbedUnimplementedImageProcApiServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedImageProcApiServer", reflect.TypeOf((*MockImageProcApiServer)(nil).mustEmbedUnimplementedImageProcApiServer))
}

// MockUnsafeImageProcApiServer is a mock of UnsafeImageProcApiServer interface.
type MockUnsafeImageProcApiServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeImageProcApiServerMockRecorder
}

// MockUnsafeImageProcApiServerMockRecorder is the mock recorder for MockUnsafeImageProcApiServer.
type MockUnsafeImageProcApiServerMockRecorder struct {
	mock *MockUnsafeImageProcApiServer
}

// NewMockUnsafeImageProcApiServer creates a new mock instance.
func NewMockUnsafeImageProcApiServer(ctrl *gomock.Controller) *MockUnsafeImageProcApiServer {
	mock := &MockUnsafeImageProcApiServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeImageProcApiServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeImageProcApiServer) EXPECT() *MockUnsafeImageProcApiServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedImageProcApiServer mocks base method.
func (m *MockUnsafeImageProcApiServer) mustEmbedUnimplementedImageProcApiServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedImageProcApiServer")
}

// mustEmbedUnimplementedImageProcApiServer indicates an expected call of mustEmbedUnimplementedImageProcApiServer.
func (mr *MockUnsafeImageProcApiServerMockRecorder) mustEmbedUnimplementedImageProcApiServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedImageProcApiServer", reflect.TypeOf((*MockUnsafeImageProcApiServer)(nil).mustEmbedUnimplementedImageProcApiServer))
}
